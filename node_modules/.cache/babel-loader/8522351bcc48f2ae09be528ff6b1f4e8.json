{"ast":null,"code":"import { configureStore, createAction, createReducer } from '@reduxjs/toolkit';\nimport { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // ACTIONS\n\nexport const actionAddProductToCart = createAction('products/addProduct');\nexport const actionDeleteProductFromCart = createAction('products/deleteProduct');\nexport const actionUpdateQuantity = createAction('products/updateProducts');\nexport const actionClearCart = createAction('products/clear'); // REDUCER\n\nconst productsReducer = createReducer([], {\n  [actionAddProductToCart]: (state, action) => {\n    return [...state, action.payload];\n  },\n  [actionDeleteProductFromCart]: (state, action) => state.filter(product => product.id !== action.payload),\n  [actionUpdateQuantity]: (state, action) => {\n    const index = state.findIndex(item => item.id === action.payload.id);\n    state[index].quantity = action.payload.quantity;\n  },\n  [actionClearCart]: (state, action) => []\n}); // PERSIST\n\nconst cartPersistConfig = {\n  key: 'products',\n  storage\n};\nconst cartPersistedReducer = persistReducer(cartPersistConfig, productsReducer); // STORE\n\nexport const store = configureStore({\n  reducer: {\n    products: cartPersistedReducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  })\n});\nexport const persistor = persistStore(store);","map":{"version":3,"sources":["D:/IT/@Repositories/test-tasks/Delivery-app/src/redux/store.js"],"names":["configureStore","createAction","createReducer","persistStore","persistReducer","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","storage","actionAddProductToCart","actionDeleteProductFromCart","actionUpdateQuantity","actionClearCart","productsReducer","state","action","payload","filter","product","id","index","findIndex","item","quantity","cartPersistConfig","key","cartPersistedReducer","store","reducer","products","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistor"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,YAAzB,EAAuCC,aAAvC,QAA4D,kBAA5D;AACA,SACEC,YADF,EAEEC,cAFF,EAGEC,KAHF,EAIEC,SAJF,EAKEC,KALF,EAMEC,OANF,EAOEC,KAPF,EAQEC,QARF,QASO,eATP;AAUA,OAAOC,OAAP,MAAoB,2BAApB,C,CAEA;;AACA,OAAO,MAAMC,sBAAsB,GAAGX,YAAY,CAAC,qBAAD,CAA3C;AACP,OAAO,MAAMY,2BAA2B,GAAGZ,YAAY,CACrD,wBADqD,CAAhD;AAGP,OAAO,MAAMa,oBAAoB,GAAGb,YAAY,CAAC,yBAAD,CAAzC;AACP,OAAO,MAAMc,eAAe,GAAGd,YAAY,CAAC,gBAAD,CAApC,C,CAEP;;AACA,MAAMe,eAAe,GAAGd,aAAa,CAAC,EAAD,EAAK;AACxC,GAACU,sBAAD,GAA0B,CAACK,KAAD,EAAQC,MAAR,KAAmB;AAC3C,WAAO,CAAC,GAAGD,KAAJ,EAAWC,MAAM,CAACC,OAAlB,CAAP;AACD,GAHuC;AAKxC,GAACN,2BAAD,GAA+B,CAACI,KAAD,EAAQC,MAAR,KAC7BD,KAAK,CAACG,MAAN,CAAaC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeJ,MAAM,CAACC,OAA9C,CANsC;AAQxC,GAACL,oBAAD,GAAwB,CAACG,KAAD,EAAQC,MAAR,KAAmB;AACzC,UAAMK,KAAK,GAAGN,KAAK,CAACO,SAAN,CAAgBC,IAAI,IAAIA,IAAI,CAACH,EAAL,KAAYJ,MAAM,CAACC,OAAP,CAAeG,EAAnD,CAAd;AACAL,IAAAA,KAAK,CAACM,KAAD,CAAL,CAAaG,QAAb,GAAwBR,MAAM,CAACC,OAAP,CAAeO,QAAvC;AACD,GAXuC;AAaxC,GAACX,eAAD,GAAmB,CAACE,KAAD,EAAQC,MAAR,KAAmB;AAbE,CAAL,CAArC,C,CAgBA;;AACA,MAAMS,iBAAiB,GAAG;AACxBC,EAAAA,GAAG,EAAE,UADmB;AAExBjB,EAAAA;AAFwB,CAA1B;AAKA,MAAMkB,oBAAoB,GAAGzB,cAAc,CAACuB,iBAAD,EAAoBX,eAApB,CAA3C,C,CAEA;;AACA,OAAO,MAAMc,KAAK,GAAG9B,cAAc,CAAC;AAClC+B,EAAAA,OAAO,EAAE;AACPC,IAAAA,QAAQ,EAAEH;AADH,GADyB;AAIlCI,EAAAA,UAAU,EAAEC,oBAAoB,IAC9BA,oBAAoB,CAAC;AACnBC,IAAAA,iBAAiB,EAAE;AACjBC,MAAAA,cAAc,EAAE,CAAC/B,KAAD,EAAQC,SAAR,EAAmBC,KAAnB,EAA0BC,OAA1B,EAAmCC,KAAnC,EAA0CC,QAA1C;AADC;AADA,GAAD;AALY,CAAD,CAA5B;AAYP,OAAO,MAAM2B,SAAS,GAAGlC,YAAY,CAAC2B,KAAD,CAA9B","sourcesContent":["import { configureStore, createAction, createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\n// ACTIONS\r\nexport const actionAddProductToCart = createAction('products/addProduct');\r\nexport const actionDeleteProductFromCart = createAction(\r\n  'products/deleteProduct'\r\n);\r\nexport const actionUpdateQuantity = createAction('products/updateProducts');\r\nexport const actionClearCart = createAction('products/clear');\r\n\r\n// REDUCER\r\nconst productsReducer = createReducer([], {\r\n  [actionAddProductToCart]: (state, action) => {\r\n    return [...state, action.payload];\r\n  },\r\n\r\n  [actionDeleteProductFromCart]: (state, action) =>\r\n    state.filter(product => product.id !== action.payload),\r\n\r\n  [actionUpdateQuantity]: (state, action) => {\r\n    const index = state.findIndex(item => item.id === action.payload.id);\r\n    state[index].quantity = action.payload.quantity;\r\n  },\r\n\r\n  [actionClearCart]: (state, action) => [],\r\n});\r\n\r\n// PERSIST\r\nconst cartPersistConfig = {\r\n  key: 'products',\r\n  storage,\r\n};\r\n\r\nconst cartPersistedReducer = persistReducer(cartPersistConfig, productsReducer);\r\n\r\n// STORE\r\nexport const store = configureStore({\r\n  reducer: {\r\n    products: cartPersistedReducer,\r\n  },\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }),\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n"]},"metadata":{},"sourceType":"module"}